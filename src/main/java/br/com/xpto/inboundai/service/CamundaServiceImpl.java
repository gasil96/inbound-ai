package br.com.xpto.inboundai.service;import br.com.xpto.inboundai.model.Main;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.camunda.bpm.engine.RuntimeService;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import java.util.HashMap;import java.util.Map;import java.util.UUID;@Slf4j@Service@RequiredArgsConstructorpublic class CamundaServiceImpl implements CamundaService {	private static final String BUSINESS_KEY_PREFIX = "MAIN-";	@Value("${process.main-workflow}")	private String processId;	private final RuntimeService runtimeService;	@Override	public void startMainWorkflow(String businessKey, Main main) {		if (businessKey == null || businessKey.isEmpty())			businessKey = generateBusinessKey();		Map<String, Object> variables = buildArgs(businessKey, main);		runtimeService.startProcessInstanceByKey(processId, businessKey, variables);		log.info("started process '{}' with businessKey '{}'", processId, businessKey);	}	private Map<String, Object> buildArgs(String businessKey, Main main) {		Map<String, Object> args = new HashMap<>();		args.put("businessKey", businessKey);		args.put("payloadCompleted", false);		args.put("payloadQualifier", false);		args.put("main", main);		return args;	}	private String generateBusinessKey() {		return BUSINESS_KEY_PREFIX + UUID.randomUUID();	}}