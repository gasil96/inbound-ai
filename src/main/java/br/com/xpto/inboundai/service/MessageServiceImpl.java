package br.com.xpto.inboundai.service;import br.com.xpto.inboundai.handler.exception.BusinessException;import br.com.xpto.inboundai.model.MessageBody;import br.com.xpto.inboundai.workflow.InboundWorkflow;import br.com.xpto.inboundai.workflow.context.GlobalContext;import com.twilio.Twilio;import com.twilio.rest.api.v2010.account.Message;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import static br.com.xpto.inboundai.model.Constants.RECEIVER_MESSAGE;@Service@Slf4j@RequiredArgsConstructorpublic class MessageServiceImpl implements MessageService {	private final static String TWILIO_PHONE_NUMBER_FORMAT = "whatsapp:+%s";	@Value("${twilio.account-sid}")	private String accountSid;	@Value("${twilio.auth-token}")	private String authToken;	private final InboundWorkflow workflow;	@Override	public Message sender(MessageBody inbound) {		try {			Twilio.init(accountSid, authToken);			return Message.creator(					new com.twilio.type.PhoneNumber(String.format(TWILIO_PHONE_NUMBER_FORMAT, inbound.getTo())),					new com.twilio.type.PhoneNumber(String.format(TWILIO_PHONE_NUMBER_FORMAT, inbound.getFrom())),					inbound.getContent()).create();		} catch (Exception e) {			log.error("Error sending message: {}", e.getMessage());			throw new BusinessException("Error sending message by: " + e.getMessage());		}	}	@Override	public MessageBody receiver(MessageBody inbound) {		try {			GlobalContext context = new GlobalContext();			context.put(RECEIVER_MESSAGE, inbound);			workflow.start(context);			log.info("Received message from: {} to: {} with content: {}", inbound.getFrom(), inbound.getTo(), inbound.getContent());		} catch (Exception e) {			log.error("Error receiving message: {}", e.getMessage());			throw new BusinessException("Error receiving message by: " + e.getMessage());		}		return inbound;	}}