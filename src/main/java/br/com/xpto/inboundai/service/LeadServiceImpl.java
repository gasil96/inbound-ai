package br.com.xpto.inboundai.service;import br.com.xpto.inboundai.handler.exception.BusinessException;import br.com.xpto.inboundai.model.Lead;import br.com.xpto.inboundai.repository.LeadRepository;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Slf4j@Service@RequiredArgsConstructorpublic class LeadServiceImpl implements LeadService {	private final LeadRepository repository;	@Override	public void create(Lead lead) {		try {			repository.save(lead);		} catch (Exception e) {			log.error("Error creating lead: {}", e.getMessage());			throw new BusinessException("Error creating lead");		}	}	@Override	public void update(Lead lead) {		try {			repository.save(lead);		} catch (Exception e) {			log.error("Error updating lead: {}", e.getMessage());			throw new BusinessException("Error updating lead");		}	}	@Override	public void deleteById(String id) {		try {			repository.deleteById(id);		} catch (Exception e) {			log.error("Error deleting lead: {}", e.getMessage());			throw new BusinessException("Error deleting lead");		}		log.info("Lead with id {} deleted successfully", id);	}	@Override	public Optional<Lead> getLeadById(String id) {		try {			return repository.findById(id);		} catch (Exception e) {			log.error("Error fetching lead: {}", e.getMessage());			throw new BusinessException("Error fetching lead");		}	}	@Override	public List<Lead> getAll() {		try {			return repository.findAll();		} catch (Exception e) {			log.error("Error fetching all leads: {}", e.getMessage());			throw new BusinessException("Error fetching all leads");		}	}}