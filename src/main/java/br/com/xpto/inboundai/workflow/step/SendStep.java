package br.com.xpto.inboundai.workflow.step;import br.com.xpto.inboundai.handler.exception.BusinessException;import br.com.xpto.inboundai.model.MessageBody;import br.com.xpto.inboundai.service.MessageService;import br.com.xpto.inboundai.workflow.context.GlobalContext;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Lazy;import org.springframework.core.annotation.Order;import org.springframework.stereotype.Component;import static br.com.xpto.inboundai.model.Constants.CHAT_RESPONSE;import static br.com.xpto.inboundai.model.Constants.RECEIVER_MESSAGE;@Slf4j@Component@Order(3)public class SendStep implements WorkflowStep {	private final MessageService messageService;	@Value("${twilio.phone-number}")	private String twilioPhoneNumber;	public SendStep(@Lazy MessageService messageService) {		this.messageService = messageService;	}	@Override	public void execute(GlobalContext context) {		log.info("SendStep started");		var chatResponse = context.get(CHAT_RESPONSE, String.class);		var messageReceiverBody = context.get(RECEIVER_MESSAGE, MessageBody.class);		try {			MessageBody body = builderMessageBody(chatResponse, messageReceiverBody);			messageService.sender(body);			log.info("Message sent to: {} with content: {}", body.getTo(), body.getContent());		} catch (Exception e) {			log.error("Error sending message: {}", e.getMessage());			throw new BusinessException("Error sending message: " + e.getMessage());		}	}	private MessageBody builderMessageBody(String chatResponse, MessageBody receiver) {		return MessageBody.builder()				       .to(receiver.getFrom().substring(receiver.getFrom().indexOf("+") + 1))				       .from(twilioPhoneNumber)				       .content(chatResponse)				       .build();	}}